name: api-template

networks:
  api-template-network:
    name: api-template-network
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.10.0/24

services:
  api-template-dev:
    image: api-template-dev:latest
    container_name: api-template-dev
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    networks:
      - api-template-network
    ports:
      - 8000:8000
    # command: ["tail", "-f", "/dev/null"] # NOTE: For testing the container
    restart: "no"
    develop:
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: .
          target: /app
          # Exclude the project virtual environment
          ignore:
            - .venv/

        # Rebuild the image on changes to the `pyproject.toml`
        - action: rebuild
          path: ./pyproject.toml

  ########## OpenTelemetry ##########

  ##### SIMPLE #####
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.53.0
    container_name: otel-collector
    networks:
      - api-template-network
    ports:
      - "4317:4317"
    volumes:
      - ./docker/otel-collector-config.yml:/config.yml
    command: --config config.yml

  jaeger:
    image: jaegertracing/all-in-one:1.35
    hostname: jaeger
    networks:
      - api-template-network
    ports:
      - 16686:16686

  ##### ADVANCED #######
  grafana-lgtm:
    image: docker.io/grafana/otel-lgtm:latest
    container_name: grafana-lgtm
    networks:
      - api-template-network
    ports:
      - 3000:3000 # Grafana
      - 4317:4317 # gRPC
      - 4318:4318 # HTTP
    environment:
      - GF_PATHS_DATA=/data/grafana
    volumes:
      - ./docker/volumes/grafana:/data/grafana
      - ./docker/volumes/prometheus:/data/prometheus
      - ./docker/volumes/loki:/data/loki

  ########## Other Services ##########
  # migrator:
  #   image: api_template:${api_template_VERSION:-latest}
  #   restart: "no"
  #   command: alembic upgrade head
  #   environment:
  #     api_template_DB_FILE: /db_data/db.sqlite3
  #   volumes:
  #     - api_template-db-data:/db_data/

  # taskiq-worker:
  #   <<: *main_app
  #   labels: []
  #   command:
  #     - taskiq
  #     - worker
  #     - app.worker.main:broker

  redis:
    image: bitnami/redis:latest
    container_name: redis
    restart: "unless-stopped"
    hostname: "api-template-redis"
    networks:
      - api-template-network
    ports:
      - "$REDIS_PORT:6379"
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 50

  rabbitmq:
    image: bitnami/rabbitmq:latest
    container_name: rabbitmq
    restart: "unless-stopped"
    hostname: "api-template-rabbitmq"
    networks:
      - api-template-network
    ports:
      - "$RABBITMQ_PORT:5672"
      - "15672:15672"
    environment:
      RABBITMQ_USERNAME: $RABBITMQ_USERNAME
      RABBITMQ_PASSWORD: $RABBITMQ_PASSWORD
      RABBITMQ_VHOST: $RABBITMQ_VHOST
      RABBITMQ_MANAGEMENT_ALLOW_WEB_ACCESS: "true"

  # kafka:
  #   image: bitnami/kafka:3.7.1-debian-12-r0
  #   hostname: "api_template-kafka"
  #   environment:
  #     KAFKA_CFG_NODE_ID: "0"
  #     KAFKA_CFG_PROCESS_ROLES: "controller,broker"
  #     KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094"
  #     KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094"
  #     KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT"
  #     KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@api_template-kafka:9093"
  #     KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
  #     KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
  #     KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
  #   # Uncomment it to connect from localhost.
  #   # ports:
  #   #   - 9094:9094
  #   healthcheck:
  #     test: kafka-topics.sh --list --bootstrap-server localhost:9092
  #     interval: 1s
  #     timeout: 3s
  #     retries: 30
